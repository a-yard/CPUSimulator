#include "../../Include/Memory.hpp"

Memory::Memory()
{
    this->BlockDeviceBASE = Memory_BASE;
    this->BlockDeviceSIZE = Memory_SIZE;
    this->PMem = (uint8_t *)malloc(BlockDeviceSIZE);
    static const uint32_t init_img[] = {
        0x00d605b3,
        0x00d605b3,
        0x00d605b3,
        0x00d605b3,
        0x00d605b3,
        0x00d605b3,
        0x00d605b3,
        0x00d605b3,
        0x00d605b3,
        0x00d605b3,
        0x00d605b3,
        0x00d605b3,
        0x00d605b3,
        0x00d605b3,
        0x00d605b3,
        0x00d605b3,
        0x00d605b3,
        0x00d605b3,
        0x00d605b3,
        0x00d605b3,
        0x00d605b3,
        0x00d605b3,
        0x00d605b3,
        0x00d605b3,
        0x00d605b3,
        0x00d605b3,
        0x00d605b3,
        0x00d605b3,
        0x00d605b3,
        0x00d605b3,
        0x00d605b3,
        0x00d605b3,
        0x00d605b3,
        0x00d605b3,
        0x00d605b3,
        0x00d605b3,
        0x00d605b3,
        0x00d605b3,
        0x00d605b3,
        0x00d605b3,
        0x00d605b3,
        0x00d605b3,
        0x00d605b3,
        0x00d605b3,
        0x00d605b3,
        0x00d605b3,
        0x00d605b3,
        0x00d605b3,
        0x00d605b3,
        0x00d605b3,
        0x00d605b3,
        0x00d605b3,
        0x00d605b3,
        0x00d605b3,
        0x00d605b3,
        0x00d605b3,
        0x00d605b3,
        0x00d605b3,
        0x00d605b3,
        0x00d605b3,
        0x00d605b3,
        0x00d605b3,
        0x00d605b3,
        0x00d605b3,
        0x00d605b3,
        0x00d605b3,
        0x00d605b3,
        0x00d605b3,
        0x00d605b3,
        0x00d605b3,
        0x00d605b3,
        0x00d605b3,
        0x00d605b3,
        0x00d605b3,
        0x00d605b3,
        0x00d605b3,
        0x00d605b3,
        0x00d605b3,
        0x00d605b3,
        0x00d605b3,
        0x00d605b3,
        0x00d605b3,
        0x00d605b3,
        0x00d605b3,
        0x00d605b3,
        0x00d605b3,
        0x00d605b3,
        0x00d605b3,
        0x00d605b3,
        0x00d605b3,
        0x00d605b3,
        0x00d605b3,
        0x00d605b3,
        0x00d605b3,
        0x00d605b3,
        0x00d605b3,
        0x00d605b3,
        0x00d605b3,
        0x00d605b3,
        0x00d605b3,
        0x00d605b3,
        0x00d605b3,
        0x00d605b3,
        0x00d605b3,
        0x00d605b3,
        0x00d605b3,
        0x00d605b3,
        0x00d605b3,
        0x00d605b3,
        0x00d605b3,
        0x00d605b3,
        0x00d605b3,
        0x00d605b3,
        0x00d605b3,
        0x00d605b3,
        0x00d605b3,
    };
    
    memcpy(GuestToHost(BlockDeviceBASE), init_img, sizeof(init_img));

}




Memory::Memory(char* ImgFile){
    this->BlockDeviceBASE = Memory_BASE;
    this->BlockDeviceSIZE = Memory_SIZE;
    this->PMem = (uint8_t *)malloc(BlockDeviceSIZE);
    this->load_img(ImgFile);
}